git diff
- compare file versions in working directory vs staging area

git diff --staged
- compare file versions in staging area vs repository latest commit

git diff commit_id1 commit_id2
- compare two versions of all files contained in two commits

git show commit_id
- compare version in commit_id against its parent

git log
- gives information about what changed in each commit (commit id,
  author, date, notes, list of files changed in the commit, number
  of inserted and deleted lines per file)
  
git checkout
- revert files to the selected commit ID

git clone
- make a copy of an entire Git repository, including the history, onto your own computer
- git clone url

git config --global core.editor "'C:\Program Files (x86)\Notepad++\notepad++.exe' -multiInst -nosession"
git config --global push.default upstream
git config --global merge.conflictstyle diff3

git init
- creates new repository

git status

Folders:
- The Git directory is where Git stores the metadata and object database for your project. This is the most important part of Git, and it is what is copied when you clone a repository from another computer.
- The working directory is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.
- The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit. It’s sometimes referred to as the “index”, but it’s also common to refer to it as the staging area.

git add
- add selected files to the staging area

git reset
- remove selected files from staging area

git checkout [branch-name]
- Switches to the specified branch and updates the working directory
- e.g. git checkout master
- e.g. git checkout coins (where coins is a remote branch)

tip of a branch
- last commit to the branch

merging
- process of combining two branches

git branch
- get list of branches in the repository
- the branch marked with an asterisk is the current branch (where updates will be made)

git branch [branch-name]
- create new branch

git log --graph --oneline [master] [coins]

each commit knows its parent

git checkout -b new_branch_name
- shortcut for these two commands:
  git branch new_branch_name
  git checkout new_branch_name
  
If a branch is deleted and leaves some commits unreachable from existing branches, those commits will continue to be accessible by commit id, until Git’s garbage collection runs. This will happen automatically from time to time, unless you actively turn it off. You can also run this process manually with git gc.

merging coins into master then removing coins branch
  git checkout master
  git merge coins
  git branch -d coins

  
merge master to easy-mode
  diagram using http://yuml.me/diagram/activity/draw
    (ships on coins)->(master),(color)->(master),(color)->(easy),(master)->(easy)
  git checkout easy-mode
  git merge master easy-mode
  resolve conflicts in game.js
  git status
        You have unmerged paths.
          (fix conflicts and run "git commit")

        Unmerged paths:
          (use "git add <file>..." to mark resolution)

                both modified:   game.js  
  git add game.js
  git status
        All conflicts fixed but you are still merging.
          (use "git commit" to conclude merge)

        Changes to be committed:

               modified:   game.js            
  
  git commit
  git log
  git log -n 1 (to show only the specified number of commits)
  
  
  
